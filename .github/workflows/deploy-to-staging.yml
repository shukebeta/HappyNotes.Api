name: Deploy to the staging env

# Controls when the workflow will run
on:
  # Triggers the workflow on push request event for master and feature branches
  push:
    branches:
      - master
      - 'feature/**'
  # Allows manual triggering from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    # Our previously created self-hosted runner
    runs-on: ARM64

    strategy:
      matrix:
        dotnet: ["8.0.x"]

    # A sequence of tasks that will execute as part of the job
    steps:
      # Checks out repository so our job can access it
      - uses: actions/checkout@v4

      - name: Fetch Git Commit Hash
        id: get_commit
        run: |
          echo "::set-output name=commit_hash::$(git rev-parse --short HEAD)"
          echo "::set-output name=build_date::$(date '+%Y-%b-%d')"

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Clean deployment directory
        run: rm -rf /var/www/HappyNotes.Api/*

      - name: Publish
        run: dotnet publish -c Release --property:PublishDir=/var/www/HappyNotes.Api

      - name: Replace placeholders with actual information
        env:
          STAGING_MYSQL_PASSWORD: ${{ secrets.STAGING_MYSQL_PASSWORD }}
          STAGING_SYMMETRIC_SECURITY_KEY: ${{ secrets.STAGING_SYMMETRIC_SECURITY_KEY }}
          STAGING_SEQ_API_KEY: ${{ secrets.STAGING_SEQ_API_KEY }}
          STAGING_SEQ_SERVER_URL: ${{ secrets.STAGING_SEQ_SERVER_URL }}
        run: |
          set -exuo pipefail
          file=/var/www/HappyNotes.Api/appsettings.json
          # commit/date from earlier step outputs
          COMMIT_HASH=${{ steps.get_commit.outputs.commit_hash }}
          BUILD_DATE=${{ steps.get_commit.outputs.build_date }}
          VERSION_INFO="$COMMIT_HASH ($BUILD_DATE)"
          # escape function: escape backslash, ampersand and the '|' delimiter
          esc() { printf '%s' "$1" | sed -e 's/\/\\/g' -e 's/&/\&/g' -e 's/|/\|/g'; }
          p=$(esc "$STAGING_MYSQL_PASSWORD")
          k=$(esc "$STAGING_SYMMETRIC_SECURITY_KEY")
          seqk=$(esc "$STAGING_SEQ_API_KEY")
          sequ=$(esc "$STAGING_SEQ_SERVER_URL")
          v=$(esc "$VERSION_INFO")sed -i "s|password-placeholder|$p|g" "$file"
          sed -i "s|symmetric-security-key-placeholder|$k|g" "$file"
          sed -i "s|VERSION_PLACEHOLDER|$v|g" "$file"
          sed -i "s|default_mysql_server|127.0.0.1|g" "$file"
          sed -i "s|default_manticore_server|sydney.shukebeta.eu.org|g" "$file"
          sed -i "s|seq-api-key-placeholder|$seqk|g" "$file"
          sed -i "s|seq-server-url-placeholder|$sequ|g" "$file"
          sed -i 's@redis-connection-placeholder@seq.shukebeta.eu.org:6380@g' "$file"appsettings.json

      - name: Restart the app
        run: |
          echo $XDG_RUNTIME_DIR
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          systemctl --user restart HappyNotes.Api.service
