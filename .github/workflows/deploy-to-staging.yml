name: Deploy to the staging env

# Controls when the workflow will run
on:
  # Triggers the workflow on push request event for the master branch
  push:
    branches: [master]
  # Allows manual triggering from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    # Our previously created self-hosted runner
    runs-on: ARM64

    strategy:
      matrix:
        dotnet: ["8.0.300"]

    # A sequence of tasks that will execute as part of the job
    steps:
      # Checks out repository so our job can access it
      - uses: actions/checkout@v4

      # Cache manually installed .NET SDK
      - name: Cache .NET SDK
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.dotnet-sdk
          key: manual-dotnet-sdk-${{ runner.os }}-${{ matrix.dotnet }}
          restore-keys: |
            manual-dotnet-sdk-${{ runner.os }}-
      
      # Manually download and install .NET SDK to deployment directory
      - name: Install .NET SDK Manually
        run: |
          # Define installation directory in deployment path
          INSTALL_DIR="/var/www/HappyNotes.Api/.dotnet-sdk"
          
          # Create directory if not exists
          mkdir -p "$INSTALL_DIR"
          
          # Download official installation script
          curl -L https://dot.net/v1/dotnet-install.sh -o dotnet-install.sh
          
          # Grant execution permission
          chmod +x dotnet-install.sh
          
          # Run script with --install-dir to force local installation
          ./dotnet-install.sh --version ${{ matrix.dotnet }} --install-dir "$INSTALL_DIR"
          
          # Add SDK path to current job's PATH environment
          echo "$INSTALL_DIR" >> $GITHUB_PATH
      
      # Verify installation success
      - name: Verify .NET SDK installation
        run: |
          which dotnet
          dotnet --info
      
      # Test systemd directory access
      - name: Test systemd directory access
        run: |
          whoami
          echo "Home: $HOME"
          echo "User: $(id -u)"
          mkdir -p ~/.config/systemd/user
          ls -la ~/.config/systemd/user || echo "Directory created successfully"

      - name: Fetch Git Commit Hash
        id: get_commit
        run: |
          echo "::set-output name=commit_hash::$(git rev-parse --short HEAD)"
          echo "::set-output name=build_date::$(date '+%Y-%b-%d')"

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish -c Release --property:PublishDir=/var/www/HappyNotes.Api

      - name: Replace placeholders with actual information
        run: |
          pwd
          sed -i "s/password-placeholder/${{ secrets.STAGING_MYSQL_PASSWORD }}/g" /var/www/HappyNotes.Api/appsettings.json
          sed -i "s/symmetric-security-key-placeholder/${{ secrets.STAGING_SYMMETRIC_SECURITY_KEY }}/g" /var/www/HappyNotes.Api/appsettings.json
          COMMIT_HASH=${{ steps.get_commit.outputs.commit_hash }}
          BUILD_DATE=${{ steps.get_commit.outputs.build_date }}
          VERSION_INFO="$COMMIT_HASH ($BUILD_DATE)"
          sed -i "s/VERSION_PLACEHOLDER/$VERSION_INFO/" /var/www/HappyNotes.Api/appsettings.json
          sed -i "s/default_mysql_server/127.0.0.1/" /var/www/HappyNotes.Api/appsettings.json
          sed -i "s/default_manticore_server/sydney.shukebeta.eu.org/" /var/www/HappyNotes.Api/appsettings.json
          sed -i "s/seq-api-key-placeholder/${{ secrets.STAGING_SEQ_API_KEY }}/g" /var/www/HappyNotes.Api/appsettings.json

      - name: Deploy systemd service file
        run: |
          # Copy service file to user systemd directory
          mkdir -p ~/.config/systemd/user
          cp deploy/systemd/happynotes-api.service ~/.config/systemd/user/HappyNotes.Api.service
          
          # Reload systemd and restart service
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          systemctl --user daemon-reload
          systemctl --user restart HappyNotes.Api.service
