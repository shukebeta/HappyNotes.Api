name: Deploy to production test env (EXPERIMENTAL)

# Manual trigger only for safety
on:
  workflow_dispatch:

jobs:
  deploy:
    # Production server
    runs-on: [self-hosted, linux, racknerd]

    strategy:
      matrix:
        dotnet: ["8.0.x"]

    steps:
      - uses: actions/checkout@v4

#      - name: Setup .NET Core SDK ${{ matrix.dotnet }}
#        uses: actions/setup-dotnet@v4
#        with:
#          dotnet-version: ${{ matrix.dotnet }}

      - name: Fetch Git Commit Hash
        id: get_commit
        run: |
          echo "::set-output name=commit_hash::$(git rev-parse --short HEAD)"
          echo "::set-output name=build_date::$(date '+%Y-%b-%d')"

      - name: Create test systemd service
        run: |
          # Create test service file
          mkdir -p ~/.config/systemd/user
          cp deploy/systemd/happynotes-api.service ~/.config/systemd/user/HappyNotes.Api.test.service

          # Modify service file for test environment
          sed -i 's|WorkingDirectory=/var/www/HappyNotes.Api|WorkingDirectory=/var/www/HappyNotes.Api.test|g' ~/.config/systemd/user/HappyNotes.Api.test.service
          sed -i 's|ExecStart=.*|ExecStart=/home/shukebeta/.dotnet/dotnet /var/www/HappyNotes.Api.test/HappyNotes.Api.dll --urls "http://127.0.0.1:5013"|g' ~/.config/systemd/user/HappyNotes.Api.test.service
          sed -i 's/Staging/Production/' ~/.config/systemd/user/HappyNotes.Api.test.service

          echo "Test service file content:"
          cat ~/.config/systemd/user/HappyNotes.Api.test.service

      - name: Start test service
        run: |
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          systemctl --user daemon-reload
          systemctl --user enable HappyNotes.Api.test.service || true
          systemctl --user restart HappyNotes.Api.test.service

      # Test with simple approach first (like staging)
      - name: Install dependencies
        run: dotnet restore

      - name: Clean project
        run: dotnet clean --configuration Release

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Clean deployment directory
        run: rm -rf /var/www/HappyNotes.Api.test/*

      - name: Publish to test directory
        run: dotnet publish -c Release --self-contained true --runtime linux-x64 --property:PublishDir=/var/www/HappyNotes.Api.test

      - name: Replace placeholders with actual information
        run: |
          pwd
          # Use production secrets but deploy to test directory
          sed -i "s/password-placeholder/${{ secrets.PRODUCTION_MYSQL_PASSWORD }}/g" /var/www/HappyNotes.Api.test/appsettings.json
          sed -i "s/symmetric-security-key-placeholder/${{ secrets.PRODUCTION_SYMMETRIC_SECURITY_KEY }}/g" /var/www/HappyNotes.Api.test/appsettings.json
          sed -i "s/staging-happynotes-api.dev/happynotes-api-test/g" /var/www/HappyNotes.Api.test/appsettings.json
          COMMIT_HASH=${{ steps.get_commit.outputs.commit_hash }}
          BUILD_DATE=${{ steps.get_commit.outputs.build_date }}
          VERSION_INFO="$COMMIT_HASH ($BUILD_DATE)"
          sed -i "s/VERSION_PLACEHOLDER/$VERSION_INFO/" /var/www/HappyNotes.Api.test/appsettings.json
          sed -i "s/default_mysql_server/127.0.0.1/" /var/www/HappyNotes.Api.test/appsettings.json
          sed -i "s/default_manticore_server/arm.shukebeta.eu.org/" /var/www/HappyNotes.Api.test/appsettings.json
          sed -i "s#seq-api-key-placeholder#${{ secrets.PRODUCTION_SEQ_API_KEY }}#g" /var/www/HappyNotes.Api.test/appsettings.json

      - name: Start test service
        run: |
          echo "ASPNETCORE_ENVIRONMENT: $ASPNETCORE_ENVIRONMENT"
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          systemctl --user daemon-reload
          systemctl --user enable HappyNotes.Api.test.service || true
          systemctl --user restart HappyNotes.Api.test.service

          echo "Test service status:"
          systemctl --user status HappyNotes.Api.test.service

          echo "Test service logs (last 20 lines):"
          journalctl --user -u HappyNotes.Api.test.service --no-pager -n 20 || echo "Could not fetch logs"

      - name: Verify test deployment
        run: |
          echo "Checking if test process is running on port 5013..."
          sleep 5
          netstat -tlnp | grep 5013 || echo "Port 5013 not listening"

          echo "Testing test HTTP endpoint..."
          curl -f http://127.0.0.1:5013/health || echo "Health check failed on test service"
